package main

import (
	"crypto/tls"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
)

var (
	sslKeyLogfile = flag.String("keylog", "ssl-keylog.txt", "File name to write NSS key log format log of TLS keys")
	listenAddr    = flag.String("listen", "[::1]:10443", "ip:port to listen on")
)

func main() {
	flag.Parse()
	log.Printf("Listening at https://%v/\n", *listenAddr)

	log.Println("Leaking TLS keys to", *sslKeyLogfile)
	f, err := os.OpenFile(*sslKeyLogfile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Fprintf(f, "# SSL/TLS secrets log file, generated by go\n")

	s := &http.Server{
		Addr:           *listenAddr,
		TLSConfig:      &tls.Config{KeyLogWriter: f},
		Handler:        http.HandlerFunc(handler),
		ReadTimeout:    5 * time.Second,
		WriteTimeout:   5 * time.Second,
		MaxHeaderBytes: 1 << 10,
	}
	log.Fatal(s.ListenAndServeTLS("cert.pem", "key.pem"))
}

func handler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte("This is an example server.\n"))
}
