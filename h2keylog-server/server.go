package main

import (
	"crypto/tls"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
)

func main() {
	keylog := flag.String("keylog", "ssl-keylog.txt", "File name to write NSS key log format log of TLS keys")
	listen := flag.String("listen", "localhost:10443", "ip:port to listen on")
	cert := flag.String("cert", "", "TLS certificate file in PEM format")
	key := flag.String("key", "", "TLS key file in PEM format")
	flag.Parse()

	s, err := httpServerWithKeyLog(*listen, *keylog)
	if err != nil {
		fmt.Fprintf(os.Stderr, "%s: %s\n", os.Args[0], err)
		os.Exit(1)
	}
	fmt.Printf("Listening at https://%s/\n", *listen)
	fmt.Printf("Leaking TLS keys to %s\n", *keylog)
	log.Fatalln(s.ListenAndServeTLS(*cert, *key))
}

func httpServerWithKeyLog(listenAddr, keyLogFileName string) (*http.Server, error) {
	kl, err := os.OpenFile(keyLogFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		return nil, err
	}
	fmt.Fprintf(kl, "# SSL/TLS secrets log file, generated by go\n")

	s := &http.Server{
		Addr: listenAddr,
		TLSConfig: &tls.Config{
			GetCertificate: generateSelfSignedCertificate,
			KeyLogWriter:   kl,
		},
		Handler:        http.HandlerFunc(handler),
		ReadTimeout:    5 * time.Second,
		WriteTimeout:   5 * time.Second,
		MaxHeaderBytes: 1 << 10,
	}
	return s, nil
}

func handler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte("This is an example server.\n"))
}
