package main

import (
	"crypto/tls"
	"flag"
	"fmt"
	"log"
	"net"
	"net/http"
	"net/http/httputil"
	"os"
	"time"

	"golang.org/x/net/http2"
)

var sslKeyLogfile = flag.String("keylog", "ssl-keylog.txt", "File name to write NSS key log format log of TLS keys")

var (
	transport = &http.Transport{
		Proxy: http.ProxyFromEnvironment,
		DialContext: (&net.Dialer{
			Timeout:   30 * time.Second,
			KeepAlive: 30 * time.Second,
		}).DialContext,
		MaxIdleConns:          100,
		IdleConnTimeout:       90 * time.Second,
		TLSHandshakeTimeout:   10 * time.Second,
		ExpectContinueTimeout: 1 * time.Second,
	}

	client = &http.Client{Transport: transport}
)

func main() {
	flag.Parse()
	if len(os.Args) != 2 {
		log.Fatalln("Usage: client <url>")
	}

	log.Println("Leaking TLS keys to", *sslKeyLogfile)
	f, err := os.OpenFile(*sslKeyLogfile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Fprintf(f, "# SSL/TLS secrets log file, generated by go\n")

	transport.TLSClientConfig = &tls.Config{
		KeyLogWriter: f,
	}
	http2.ConfigureTransport(transport)

	res, err := client.Get(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}
	dump, err := httputil.DumpResponse(res, true)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(dump))
}
